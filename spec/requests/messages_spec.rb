require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/messages", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Message. As you add validations to Message, be sure to
  # adjust the attributes here as well.

  # This before action will create messages each time the test is run.
  before(:each) do
    FactoryBot.create(:message, text: "Message test 1")
    FactoryBot.create(:message, text: "Message test 2")
  end

  describe "get all messages at /messages" do
    it "should return all messages" do
      get "/messages"
      expect(response).to have_http_status(:success)
      # print JSON.parse(response.body)
      expect(JSON.parse(response.body).size).to eq(2)
    end

    describe "get  message at /messages/:id" do
      it "should get a message based on param" do
        get "/messages/3"
        # print JSON.parse(response.body)
        expect(response).to have_http_status(:success)
        # access just to the body of the message
        expect(response.body).to include("Message test 1")
      end

      it "should return a not found message based on param" do
        get "/messages/35"
        # print JSON.parse(response.body)
        expect(response).to have_http_status(:not_found)
      end
        # expect(JSON.parse(response.body).size).to eq(2)
      end

      


  end


  # let(:valid_attributes) {
  #   skip("Add a hash of attributes valid for your model")
  # }

  # let(:invalid_attributes) {
  #   skip("Add a hash of attributes invalid for your model")
  # }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # MessagesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  # let(:valid_headers) {
  #   {}
  # }

  # describe "GET /index" do
  #   it "renders a successful response" do
  #     Message.create! valid_attributes
  #     get messages_url, headers: valid_headers, as: :json
  #     expect(response).to be_successful
  #   end
  # end

  # describe "GET /show" do
  #   it "renders a successful response" do
  #     message = Message.create! valid_attributes
  #     get message_url(message), as: :json
  #     expect(response).to be_successful
  #   end
  # end

  # describe "POST /create" do
  #   context "with valid parameters" do
  #     it "creates a new Message" do
  #       expect {
  #         post messages_url,
  #              params: { message: valid_attributes }, headers: valid_headers, as: :json
  #       }.to change(Message, :count).by(1)
  #     end

  #     it "renders a JSON response with the new message" do
  #       post messages_url,
  #            params: { message: valid_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:created)
  #       expect(response.content_type).to match(a_string_including("application/json"))
  #     end
  #   end

  #   context "with invalid parameters" do
  #     it "does not create a new Message" do
  #       expect {
  #         post messages_url,
  #              params: { message: invalid_attributes }, as: :json
  #       }.to change(Message, :count).by(0)
  #     end

  #     it "renders a JSON response with errors for the new message" do
  #       post messages_url,
  #            params: { message: invalid_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:unprocessable_entity)
  #       expect(response.content_type).to match(a_string_including("application/json"))
  #     end
  #   end
  # end

  # describe "PATCH /update" do
  #   context "with valid parameters" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }

  #     it "updates the requested message" do
  #       message = Message.create! valid_attributes
  #       patch message_url(message),
  #             params: { message: new_attributes }, headers: valid_headers, as: :json
  #       message.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "renders a JSON response with the message" do
  #       message = Message.create! valid_attributes
  #       patch message_url(message),
  #             params: { message: new_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:ok)
  #       expect(response.content_type).to match(a_string_including("application/json"))
  #     end
  #   end

  #   context "with invalid parameters" do
  #     it "renders a JSON response with errors for the message" do
  #       message = Message.create! valid_attributes
  #       patch message_url(message),
  #             params: { message: invalid_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:unprocessable_entity)
  #       expect(response.content_type).to match(a_string_including("application/json"))
  #     end
  #   end
  # end

  # describe "DELETE /destroy" do
  #   it "destroys the requested message" do
  #     message = Message.create! valid_attributes
  #     expect {
  #       delete message_url(message), headers: valid_headers, as: :json
  #     }.to change(Message, :count).by(-1)
  #   end
  # end
end
